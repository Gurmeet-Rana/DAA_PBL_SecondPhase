#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TRAINS 5
#define MAX_PATHS 5
#define MAX_STATIONS 20
#define MAX_PLATFORMS 5
#define MAX_STATION_NAME 30

typedef struct {
    char name[MAX_STATION_NAME];
} Station;

typedef struct {
    int id;
    int numStations;
    Station stations[MAX_STATIONS];
    int occupied;
} Path;

typedef struct {
    int id;
    int delay;
    int platform;
    int path;
    int numStations;
    Station stations[MAX_STATIONS];
} Train;

int compareStations(Station* s1, Station* s2) {
    return strcmp(s1->name, s2->name) == 0;
}

int compareStationLists(Station* list1, int len1, Station* list2, int len2) {
    if (len1 != len2) return 0;
    for (int i = 0; i < len1; i++) {
        if (!compareStations(&list1[i], &list2[i])) return 0;
    }
    return 1;
}

int findFreeCompatiblePath(Path* paths, int pathCount, Station* requiredStations, int stationCount) {
    for (int i = 0; i < pathCount; i++) {
        if (!paths[i].occupied && compareStationLists(paths[i].stations, paths[i].numStations, requiredStations, stationCount)) {
            return i;
        }
    }
    return -1;
}

void rescheduleTrain(Train* train, Path* paths, int pathCount) {
    int newPath = findFreeCompatiblePath(paths, pathCount, train->stations, train->numStations);
    if (newPath != -1) {
        train->path = newPath;
        paths[newPath].occupied = 1;
        printf("Train %d rescheduled to path %d and platform %d.\n", train->id + 1, newPath + 1, train->platform);
    } else {
        printf("No compatible free path found for Train %d. Marking train as delayed.\n", train->id + 1);
    }
}
